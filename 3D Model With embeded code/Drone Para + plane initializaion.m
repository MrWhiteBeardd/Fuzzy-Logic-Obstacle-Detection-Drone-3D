/* Fuzzy logic controllers for detecting collisions and for determining appropriate collision avoidance maneuver @authors Michelle Hromatka, Jeffrey West */ #include "ros/ros.h" #include "fuzzylite/FuzzyLite.h" #include "AU_UAV_ROS/FuzzyLogicController.h" #include <string> #include <sstream> double AU_UAV_ROS::FuzzyLogicController::oursandtheirs2(double distance, double ourAngle, double theirAngle){ fl::FuzzyOperator& op = fl::FuzzyOperator::DefaultFuzzyOperator(); fl::FuzzyEngine engine("Heading-Change", op); fl::InputLVar* distanceBetweenPlanes = new fl::InputLVar("PlaneDist"); distanceBetweenPlanes->addTerm(new fl::ShoulderTerm("VERYCLOSE", 24.0; 50.0; true)); distanceBetweenPlanes->addTerm(new fl::TriangularTerm("CLOSE", 24.0, 65.0)); distanceBetweenPlanes->addTerm(new fl::TriangularTerm("FAR", 35.0, 76.0)); distanceBetweenPlanes->addTerm(new fl::ShoulderTerm("VERYFAR", 50.0, 76.0, false)); engine.addInputLVar(distanceBetweenPlanes); fl::InputLVar* ourBearingAngle = new fl::InputLVar("OurBearingAngle"); ourBearingAngle->addTerm(new fl::ShoulderTerm("VERYNEG",-90.0,-45.0, true)); ourBearingAngle->addTerm(new fl::TriangularTerm("NEG",-89,-44.0)); ourBearingAngle->addTerm(new fl::TriangularTerm("LOWNEG",-45.0, 2.0)); ourBearingAngle->addTerm(new fl::TriangularTerm("LOWPOS", 1.0, 45.0)); ourBearingAngle->addTerm(new fl::TriangularTerm("POS", 44, 89.0)); ourBearingAngle->addTerm(new fl::ShoulderTerm("VERYPOS", 45, 90.0, false)); engine.addInputLVar(ourBearingAngle);fl::InputLVar* theirBearingAngle = new fl::InputLVar("TheirBearingAngle"); theirBearingAngle->addTerm(new fl::ShoulderTerm("VERYNEG",-90.0,-45.0, true)); theirBearingAngle->addTerm(new fl::TriangularTerm("NEG",-89,-44.0)); theirBearingAngle->addTerm(new fl::TriangularTerm("LOWNEG",-45.0, 2.0)); theirBearingAngle->addTerm(new fl::TriangularTerm("LOWPOS", 1.0, 45.0)); theirBearingAngle->addTerm(new fl::TriangularTerm("POS", 44, 89.0)); theirBearingAngle->addTerm(new fl::ShoulderTerm("VERYPOS", 45, 90.0, false)); engine.addInputLVar(theirBearingAngle); fl::OutputLVar* changeHeading = new fl::OutputLVar("ChangeInHeading"); changeHeading->addTerm(new fl::TriangularTerm("VERYLEFT",-45, 0.0));); changeHeading->addTerm(new fl::TriangularTerm("LEFT",-22.5, 0.0)); changeHeading->addTerm(new fl::TriangularTerm("NOCHANGE",-22.5, 22.5)); changeHeading->addTerm(new fl::TriangularTerm("RIGHT", 0.0, 22.5)); changeHeading->addTerm(new fl::TriangularTerm("VERYRIGHT", 0.0, 45));); engine.addOutputLVar(changeHeading); fl::RuleBlock* block = new fl::RuleBlock(); //PlaneDist is VERYCLOSE block->addRule(new fl::MamdaniRule("if OurBearingAngle is VERYNEG and TheirBearingAngle" & "isVERYNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is VERYNEG and TheirBearingAngle" & "isNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is VERYNEG and TheirBearingAngle" & "isLOWNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is VERYNEG and TheirBearingAngle" & "isLOWPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is VERYNEG and TheirBearingAngle" & "isPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is VERYNEG and TheirBearingAngle" & "isVERYPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is NEG and TheirBearingAngle" & "isVERYNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is NEG and TheirBearingAngle" & "isNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is NEG and TheirBearingAngle" & "isLOWNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is NEG and TheirBearingAngle" & "isLOWPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is NEG and TheirBearingAngle" & "isPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is NEG and TheirBearingAngle" & "isVERYPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is LOWNEG and TheirBearingAngle" & "isVERYNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is LOWNEG and TheirBearingAngle" & "isNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is LOWNEG and TheirBearingAngle" & "isLOWNEGandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is LOWNEG and TheirBearingAngle" & "isLOWPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYRIGHT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is LOWNEG and TheirBearingAngle" & "isPOSandPlaneDistisVERYCLOSEthenChangeInHeadingisVERYLEFT",engine)); block->addRule(new fl::MamdaniRule("if OurBearingAngle is LOWNEG and TheirBearingAngle" &